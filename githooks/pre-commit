#!/bin/bash
# PHP CodeSniffer pre-commit hook for git
#
# @author Soenke Ruempler <soenke@ruempler.eu>
# @author Sebastian Kaspari <s.kaspari@googlemail.com>
#
# see the README

TMP_STAGING=".tmp_staging"

# parse config
CONFIG_FILE=$(dirname $0)/config-pre-commit
if [ -e $CONFIG_FILE ]; then
    . $CONFIG_FILE
fi

# simple check if phpunit is set up correctly
if [ ! -x $PHPCS_BIN ]; then
    echo "PHPUnit bin not found or executable -> $PHPUNIT_BIN"
    exit 1
fi

# simple check if code sniffer is set up correctly
if [ ! -x $PHPCS_BIN ]; then
    echo "PHP CodeSniffer bin not found or executable -> $PHPCS_BIN"
    exit 1
fi

# stolen from template file
if git rev-parse --verify HEAD
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# this is the magic: 
# retrieve all files in staging area that are added, modified or renamed
# but no deletions etc
FILES=$(git diff-index --name-only --cached --diff-filter=ACMR $against -- )

if [ "$FILES" == "" ]; then
    exit 0
fi

# match files against whitelist
FILES_TO_CHECK=""
for FILE in $FILES
do
    echo "$FILE" | grep -Pq "$PHPCS_FILE_PATTERN"
    RETVAL=$?
    if [ "$RETVAL" -eq "0" ]
    then
        FILES_TO_CHECK="$FILES_TO_CHECK $FILE"
    fi
done

if [ "$FILES_TO_CHECK" == "" ]; then
    exit 0
fi

if [ "$PHPCS_IGNORE" != "" ]; then
    IGNORE="--ignore=$PHPCS_IGNORE"
else
    IGNORE=""
fi

if [ "$PHPCS_SNIFFS" != "" ]; then
    SNIFFS="--sniffs=$PHPCS_SNIFFS"
else
    SNIFFS=""
fi

if [ "$PHPCS_ENCODING" != "" ]; then
    ENCODING="--encoding=$PHPCS_ENCODING"
else
    ENCODING=""
fi

if [ "$PHPCS_IGNORE_WARNINGS" == "1" ]; then
    IGNORE_WARNINGS="-n"
else
    IGNORE_WARNINGS=""
fi

# execute the code sniffer
OUTPUTPHPCS=$($PHPCS_BIN -p $IGNORE_WARNINGS --standard=$PHPCS_CODING_STANDARD $ENCODING $IGNORE $SNIFFS $FILES_TO_CHECK)
RETVALPHPCS=$?

# delete temporary copy of staging area
rm -rf $TMP_STAGING

# check the return value from code sniffer
if [ $RETVALPHPCS -ne 0 ]; then
    echo "Please fix the following code style error(s) and recommit."
    echo "$OUTPUTPHPCS"
    exit $RETVALPHPCS
fi

# execute phpunit
OUTPUTPHPUNIT=$($PHPUNIT_BIN)
RETVALPHPUNIT=$?

# check the return value from phpunit
if [ $RETVALPHPUNIT -ne 0 ]; then
    echo "Please fix the following failing phpunit tests and recommit."
    echo "$OUTPUTPHPUNIT"
    exit $RETVALPHPUNIT
fi

# execute phpunit
OUTPUTDUSK=$(php $(dirname $0)/../../artisan dusk)
RETVALDUSK=$?

# check the return value from phpunit
if [ $RETVALDUSK -ne 0 ]; then
    echo "Please fix the following failing laravel dusk tests and recommit."
    echo "$OUTPUTDUSK"
    exit $RETVALDUSK
fi

exit 0
